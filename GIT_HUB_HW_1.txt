TXT

1.Создать внешний репозиторий c названием TXT.
  1.1 New repository/JSON
  1.2 Копируем SSH-ключ в буфер обмена

2.Клонировать репозиторий txt на локальный компьютер.
  2.1 Выполянем команду: git clone git@github.com:NatashaSmolyak/txt.git
  2.2 Подтверждаем паролем создание пустого локального репозитория.

3.Внутри локального txt создать файл “new.txt”.
  3.1 Заходим в директорию txt: $ cd txt
  3.2 Создаем новый файл: $ touch new.txt

4.Добавить файл под гит.
  4.1 Добавляем файл для контроля Git: $ git add new.txt
 
5.Закоммитить файл.
  5.1 Сохраняем состояние директории:$ git commit -m "Add file new.txt"

6.Отправить файл на внешний GitHub репозиторий.
  6.1. $ git push
  6.2. Подтверждаем паролем отправку файл на внешний репозиториий.

7.Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате txt.
  7.1 Открываем файл для редактирования: $ nano new.txt
 FIO - Natasha Smolyak
 Age - 51
 Nnumber_of_pets - 0
 Salary - 2500

  7.2 Запись и выйти: CTRL+O, CTRL+X
8.Отправить изменения на внешний репозиторий.
  8.1. Проводим контроль и сохрание изменений:$ git commit -am "modified new.txt"
  8.2. Обновляем на внешнем репозитории: $ git push
  8.3. Подтверждаем изменения  с помощью пароля.

9. Создать файл preferences.txt
  9.1. Создаем новый файл: $ touch preferences.json

10.В файл preferences.txt добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате txt.
  10.1 Открываем файл для редактирования: $ nano preferences.txt
  favorite_movie - Brilliantovaya_ruka 
  favorite_serial - Interni> 
  favorite_food - golubtsy 
  favorite_time_of_year - spring 
  country_to_vizit - Iceland 

  10.2 Запись и выйти: CTRL+O, CTRL+X

11.Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате txt
  11.1 Создаем новый файл: $ touch sklls.txt

12.Сделать коммит в одну строку.
 12.1 $ git commit -am "Add new files"

13.Отправить сразу 2 файла на внешний репозиторий.
  13.1 $ git add .
  13.2 $ git commit -m "Add files:preferences.txt, skills.txt"
  13.3 $ git push

14.На веб интерфейсе создать файл bug_report.txt.
 14.1. Создаем файл bug_report.txt: Add file/Create new file
 14.2. Заполняем Title - - "Create file bug_report.txt"
 14.3. Устанавливаем  переключатель: Commit directly to the main branch
 14.4. Нажимаем кнопку [Commit new file]

15.На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате txt.
  15.1. Открываем файл bug_report.txt.
  15.2. Выволняем команду Edit this file.
  15.3. Вводимт текст в формате txt.

16.Сделать Commit changes (сохранить) изменения на веб интерфейсе.
   16.1. Заполняем Title - "Modified file bug_report.txt"
   16.2. Устанавливаем  переключатель: Commit directly to the main branch.
   16.3. Нажимаем кнопку [Commit changes].

17.Синхронизировать внешний и локальный репозиторий txt
   17.1. Узнаем про изменения на внешнем репозитории: $ git fetch
   17.2. Скачиваем изменения на локальный репозиторий: $ git pull
   17.3. Снова проверяем изменения (что пусто): $ git fetch

JSON
 1. Создать внешний репозиторий c названием JSON.
   1.1. New repository/JSON
   1.2. Копируем SSH-ключ в буфер обмена
 
 2. Клонировать репозиторий JSON на локальный компьютер.
   2.1. Выполянем команду: git clone git@github.com:NatashaSmolyak/JSON.git
   2.2. Подтверждаем паролем создание пустого локального репозитория.
 
 3. Внутри локального JSON создать файл “new.json”.
   3.1. Заходим в директорию JSON: $ cd json
   3.2. Создаем новый файл: $ touch new.json

 4. Добавить файл под гит.
   4.1. Добавляем файл для контроля Git: $ git add new.json

 5. Закоммитить файл.
   5.1. Сохраняем состояние директории: $ git commit -m "Add new.json"

 6. Отправить файл на внешний GitHub репозиторий.
   6.1. $ git push
 7. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
    7.1 Открываем файл для редактирования: $ vim new.json
    7.2. Вводим текст в формате JSON
	{"person_name":"Natasha Smolyak",
     "person_age":51,
     "number_of_pets":0,
     "salary":2500} 
    7.3. Нажимаем ESC, затем :wq
	 
 8. Отправить изменения на внешний репозиторий.
    8.1. Проводим контроль и сохрание изменений:$ git commit -am "modified new.text"
    8.2. Обновляем на внешнем репозитории: $ git push
    8.3. Подтверждаем изменения  с помощью пароля.
 
 9. Создать файл preferences.json
    9.1. Создаем новый файл: $ touch preferences.json
 
 10. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
    10.1 Открываем файл для редактирования: $ vim preferences.json
    10.2. Вводим текст в формате JSON
	{"favorite_movie":"Brilliantovaya_ruka",
     "favorite_serial":"Interni",
     "favorite_food":"golubtsy",
     "favorite_time_of_year":"spring",
    "country_to_vizit":"Iceland"}
	 10.3. Нажимаем ESC, затем :wq
 
 11. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
     11.1 Создаем новый файл: $ touch sklls.json
     11.2 В Блокноте заполняем данными и сохраняем в формате JSON.
	 
 12. Отправить сразу 2 файла на внешний репозиторий.
    12.1. $ git add preferences.json skills.json
    12.2. $ git commit -m "Add preferences.json skills.json"
    12.3. $ git push
 13. На веб интерфейсе создать файл bug_report.json.
    13.1. Создаем файл bug_report.json: Add file/Create new file
    13.2. Заполняем Title - - "Create file ug_report.json"
    13.3. Устанавливаем  переключатель: Commit directly to the main branch
    13.4. Нажимаем кнопку [Commit new file]
 
 14. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
    14.1. Открываем файл bug_report.json.
    14.2. Выволняем команду Edit this file.
    14.3. Вводимт текст в формате JSON.
 
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
    15.1. Заполняем Title - "Modified file sug_report.json"
    15.2. Устанавливаем  переключатель: Commit directly to the main branch.
    15.3. Нажимаем кнопку [Commit changes].\
	
 16. Синхронизировать внешний и локальный репозиторий JSON.
    16.1. Узнаем про изменения на внешнем репозитории: $ git fetch
    16.2. Скачиваем изменения на локальный репозиторий: $ git pull
    16.3. Снова проверяем изменения (что пусто): $ git fetch


XML
1.Создать внешний репозиторий c названием XML.
  1.1 New repository/JSON
  1.2 Копируем SSH-ключ в буфер обмена

2.Клонировать репозиторий XML на локальный компьютер.
  2.1 Выполянем команду: git clone git@github.com:NatashaSmolyak/XML.git
  2.2 Подтверждаем паролем создание пустого локального репозитория.

3.Внутри локального XML создать файл “new.xml”.
  3.1 Заходим в директорию XML: $ cd XML
  3.2 Создаем новый файл: $ touch new.xml

4.Добавить файл под гит.
  4.1 Добавляем файл для контроля Git: $ git add new.xml
 
5.Закоммитить файл.
  5.1 Сохраняем состояние директории:$ git commit -m "Add file new.xml"

6.Отправить файл на внешний GitHub репозиторий.
  6.1. $ git push
  6.2. Подтверждаем паролем отправку файл на внешний репозиториий.

7.Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
  7.1 Открываем файл для редактирования: $ nano new.xml
<info>
 <person_name> Natasha Smolyak </person_name>
 <person_age> 51 </person_age>
 <number_of_pets> 0 </number_of_pets>
 <salary> 2500 </salary>
</info>
  7.2 Запись и выйти: CTRL+O, CTRL+X
8.Отправить изменения на внешний репозиторий.
  8.1. Проводим контроль и сохрание изменений:$ git commit -am "modified new.xml"
  8.2. Обновляем на внешнем репозитории: $ git push
  8.3. Подтверждаем изменения  с помощью пароля.

9. Создать файл preferences.xml
  9.1. Создаем новый файл: $ touch preferences.json

10.В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
  10.1 Открываем файл для редактирования: $ nano new.xml
<preferences>
  <favorite_movie>Brilliantovaya_ruka</favorite_movie> 
  <favorite_serial>Interni</favorite_serial> 
  <favorite_food>golubtsy</favorite_food> 
  <favorite_time_of_year>spring</favorite_time_of_year> 
  <country_to_vizit>Iceland</country_to_vizit> 
  </preferences>
  10.2 Запись и выйти: CTRL+O, CTRL+X

11.Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
  11.1 Создаем новый файл: $ touch sklls.xml

12.Сделать коммит в одну строку.
 12.1 $ git commit -am "Add new files"

13.Отправить сразу 2 файла на внешний репозиторий.
  13.1 $ git add .
  13.2 $ git commit -m "Add files:preferences.xml, skills.xml"
  13.3 $ git push

14.На веб интерфейсе создать файл bug_report.xml.
 14.1. Создаем файл bug_report.xml: Add file/Create new file
 14.2. Заполняем Title - - "Create file bug_report.xml"
 14.3. Устанавливаем  переключатель: Commit directly to the main branch
 14.4. Нажимаем кнопку [Commit new file]

15.На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
  15.1. Открываем файл bug_report.xml.
  15.2. Выволняем команду Edit this file.
  15.3. Вводимт текст в формате XML.

16.Сделать Commit changes (сохранить) изменения на веб интерфейсе.
   16.1. Заполняем Title - "Modified file bug_report.xml"
   16.2. Устанавливаем  переключатель: Commit directly to the main branch.
   16.3. Нажимаем кнопку [Commit changes].

17.Синхронизировать внешний и локальный репозиторий XML
   17.1. Узнаем про изменения на внешнем репозитории: $ git fetch
   17.2. Скачиваем изменения на локальный репозиторий: $ git pull
   17.3. Снова проверяем изменения (что пусто): $ git fetch


